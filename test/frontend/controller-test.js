describe('IndexCtrl', function() {
    var scope, httpBackend, createController;

    beforeEach(inject(function($rootScope, $controller) {
        scope = $rootScope.$new();

        createController = function() {
            return $controller('IndexCtrl', {
                '$scope': scope
            });
        };
    }));

    it('runs without errors', function() {
        var controller = createController();
        scope.$digest();

        expect(scope.alerts).toEqual([]);
        expect(scope.title).toEqual('QMPJ');
    });
});

describe('ConfigCtrl', function() {
    var scope, createController;
    
    beforeEach(inject(function($rootScope, $controller) {
        scope = $rootScope.$new();

        createController = function() {
            return $controller('ConfigCtrl', {
                '$scope': scope
            });
        };
    }));


    it('runs without errors', function() {
        var controller = createController();
        scope.$digest();
        expect(scope.alerts).toEqual([]);
    });
});

describe('ConfigFormCtrl', function() {
    var scope, httpBackend, createController;
    beforeEach(module('myQmpj.services'));
    beforeEach(inject(function(_$q_){
        $q = _$q_;
    }));

    var configServiceMock = {
          getCurrentConfig:  function (forceReload) {
            var deferred = $q.defer();
            var self = this; 
            deferred.resolve(true);
            return deferred.promise;

          },
          currentConfig: {"module":{"$":{"name":"Checker"},"module":[{"$":{"name":"TreeWalker"},"module":[{"$":{"name":"CyclomaticComplexity"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"cyclomaticcomplexitychecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Checks cyclomatic complexity against a specified limit. The complexity is measured by the number of if, while, do, for, ?:, catch, switch, case statements, and operators && and || (plus one) in the body of a constructor, method, static initializer, or instance initializer. It is a measure of the minimum number of possible paths through the source and therefore the number of required tests. Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now!\n                "}},{"$":{"name":"com.jmv.title","value":"CyclomaticComplexity check"}}],"property":[{"$":{"name":"severity","value":"warning"}},{"$":{"name":"max","value":"5"}}]},{"$":{"name":"BooleanExpressionComplexity"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"booleanexpressioncomplexitychecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Restrict the number of number of &&, ||, &, | and ^ in an expression.\n                Rationale: Too many conditions leads to code that is difficult to read and hence debug and maintain.\n                Note that the operators & and | are not only integer bitwise operators, they are also the non-shortcut versions of the boolean operators && and ||.\n                "}},{"$":{"name":"com.jmv.title","value":"BooleanExpressionComplexity check"}}],"property":[{"$":{"name":"severity","value":"warning"}},{"$":{"name":"max","value":"4"}},{"$":{"name":"tokens","value":"LAND, BAND, LOR, BOR, BXOR"}}]},{"$":{"name":"ClassDataAbstractionCoupling"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"classdataabstractioncouplingchecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                This metric measures the number of instantiations of other classes within the given class. This type of coupling is not caused by inheritance or the object oriented paradigm. Generally speaking, any abstract data type with other abstract data types as members has data abstraction coupling; therefore, if a class has a local variable that is an instantiation (object) of another class, there is data abstraction coupling. The higher the DAC, the more complex the data structure (classes) of the system.\n                "}},{"$":{"name":"com.jmv.title","value":"ClassDataAbstractionCoupling check"}}],"property":[{"$":{"name":"severity","value":"warning"}},{"$":{"name":"max","value":"7"}}]},{"$":{"name":"ClassFanOutComplexity"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"classfanoutcomplexitychecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                The number of other classes a given class relies on. Also the square of this has been shown to indicate the amount of maintenance required in functional programs (on a file basis) at least.\n                "}},{"$":{"name":"com.jmv.title","value":"ClassFanOutComplexity check"}}],"property":[{"$":{"name":"severity","value":"warning"}},{"$":{"name":"max","value":"20"}}]},{"$":{"name":"NPathComplexity"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"npathcomplexitychecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                The NPATH metric computes the number of possible execution paths through a function. It takes into account the nesting of conditional statements and multi-part boolean expressions (e.g., A && B, C || D, etc.).\n                Rationale: Nejmeh says that his group had an informal NPATH limit of 200 on individual routines; functions that exceeded this value were candidates for further decomposition - or at least a closer look.\n                "}},{"$":{"name":"com.jmv.title","value":"NPathComplexity check"}}],"property":[{"$":{"name":"severity","value":"warning"}},{"$":{"name":"max","value":"200"}}]},{"$":{"name":"JavaNCSS"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"javancsschecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). This check adheres to the specification for the JavaNCSS-Tool written by Chr. Clemens Lee.\n                Rougly said the NCSS metric is calculated by counting the source lines which are not comments, (nearly) equivalent to counting the semicolons and opening curly braces.\n                The NCSS for a class is summarized from the NCSS of all its methods, the NCSS of its nested classes and the number of member variable declarations.\n                The NCSS for a file is summarized from the ncss of all its top level classes, the number of imports and the package declaration.\n\n                Rationale: Too large methods and classes are hard to read and costly to maintain. A large NCSS number often means that a method or class has too many responsibilities and/or functionalities which should be decomposed into smaller units.\n                "}},{"$":{"name":"com.jmv.title","value":"JavaNCSS check"}}],"property":[{"$":{"name":"severity","value":"error"}},{"$":{"name":"methodMaximum","value":"50"}},{"$":{"name":"classMaximum","value":"1500"}},{"$":{"name":"fileMaximum","value":"2000"}}]},{"$":{"name":"RedundantImport"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"redundantimportchecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Checks for redundant import statements. An import statement is considered redundant if:\n                It is a duplicate of another import. This is, when a class is imported more than once.\n                The class imported is from the java.lang package, e.g. importing java.lang.String.\n                The class imported is from the same package.\n                "}},{"$":{"name":"com.jmv.title","value":"RedundantImport check"}}],"property":[{"$":{"name":"severity","value":"error"}}]},{"$":{"name":"ImportOrder"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"importorderchecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Checks the ordering/grouping of imports. Features are:\n                groups imports: ensures that groups of imports come in a specific order (e.g., java. comes first, javax. comes second, then everything else)\n                adds a separation between groups : ensures that a blank line sit between each group\n                sorts imports inside each group: ensures that imports within each group are in lexicographic order\n                sorts according to case: ensures that the comparison between imports is case sensitive\n                groups static imports: ensures the relative order between regular imports and static imports\n                "}},{"$":{"name":"com.jmv.title","value":"ImportOrder check"}}],"property":[{"$":{"name":"severity","value":"warning"}},{"$":{"name":"groups","value":"com.google,android,junit,net,org,java,javax"}},{"$":{"name":"option","value":"top"}}]},{"$":{"name":"JavadocMethod"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"javadocmethodchecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Checks the Javadoc of a method or constructor. By default, does not check for unused throws. To allow documented java.lang.RuntimeExceptions that are not declared, set property allowUndeclaredRTE to true. The scope to verify is specified using the Scope class and defaults to Scope.PRIVATE. To verify another scope, set property scope to a different scope.\n\n                Error messages about parameters and type parameters for which no param tags are present can be suppressed by defining property allowMissingParamTags. Error messages about exceptions which are declared to be thrown, but for which no throws tag is present can be suppressed by defining property allowMissingThrowsTags. Error messages about methods which return non-void but for which no return tag is present can be suppressed by defining property allowMissingReturnTag.\n\n                Javadoc is not required on a method that is tagged with the @Override annotation. However under Java 5 it is not possible to mark a method required for an interface (this was corrected under Java 6). Hence Checkstyle supports using the convention of using a single {@inheritDoc} tag instead of all the other tags.\n\n                Note that only inheritable items will allow the {@inheritDoc} tag to be used in place of comments. Static methods at all visibilities, private non-static methods and constructors are not inheritable.\n\n                For example, if the following method is implementing a method required by an interface, then the Javadoc could be done as:\n<pre>\n/** {@inheritDoc} */\npublic int checkReturnTag(final int aTagIndex,\n                          JavadocTag[] aTags,\n                          int aLineNo)\n</pre>\n                The classpath may need to be configured to locate the class information. The classpath configuration is dependent on the mechanism used to invoke Checkstyle.\n                "}},{"$":{"name":"com.jmv.title","value":"JavadocMethod check"}}],"property":[{"$":{"name":"scope","value":"protected"}},{"$":{"name":"severity","value":"warning"}},{"$":{"name":"allowMissingJavadoc","value":"true"}},{"$":{"name":"allowMissingParamTags","value":"true"}},{"$":{"name":"allowMissingReturnTag","value":"true"}},{"$":{"name":"allowMissingThrowsTags","value":"true"}},{"$":{"name":"allowThrowsTagsForSubclasses","value":"true"}},{"$":{"name":"allowUndeclaredRTE","value":"true"}}]},{"$":{"name":"JavadocType"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"javadoctypechecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Checks Javadoc comments for class and interface definitions. By default, does not check for author or version tags. The scope to verify is specified using the Scope class and defaults to Scope.PRIVATE. To verify another scope, set property scope to one of the Scope constants. To define the format for an author tag or a version tag, set property authorFormat or versionFormat respectively to a regular expression.\n                "}},{"$":{"name":"com.jmv.title","value":"JavadocType check"}}],"property":[{"$":{"name":"scope","value":"protected"}},{"$":{"name":"severity","value":"error"}}]},{"$":{"name":"JavadocStyle"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"javadocstylechecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Validates Javadoc comments to help ensure they are well formed. The following checks are performed:\n\n                Ensures the first sentence ends with proper punctuation (That is a period, question mark, or exclamation mark, by default). Javadoc automatically places the first sentence in the method summary table and index. With out proper punctuation the Javadoc may be malformed. All items eligible for the {@inheritDoc} tag are exempt from this requirement.\n                Check text for Javadoc statements that do not have any description. This includes both completely empty Javadoc, and Javadoc with only tags such as @param and @return.\n                Check text for incomplete HTML tags. Verifies that HTML tags have corresponding end tags and issues an 'Unclosed HTML tag found:' error if not. An 'Extra HTML tag found:' error is issued if an end tag is found without a previous open tag.\n                Check that a package Javadoc comment is well-formed (as described above) and NOT missing from any package-info.java files.\n                Check for allowed HTML tags. The list of allowed HTML tags is 'a', 'abbr', 'acronym', 'address', 'area', 'b', 'bdo', 'big', 'blockquote', 'br', 'caption', 'cite', 'code', 'colgroup', 'del', 'div', 'dfn', 'dl', 'em', 'fieldset', 'h1' to 'h6', 'hr', 'i', 'img', 'ins', 'kbd', 'li', 'ol', 'p', 'pre', 'q', 'samp', 'small', 'span', 'strong', 'sub', 'sup', 'table', 'tbody', 'td', 'tfoot', 'th', 'thread', 'tr', 'tt', 'ul'.\n                "}},{"$":{"name":"com.jmv.title","value":"JavadocStyle check"}}],"property":[{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"PackageName"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"packagenamechecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Checks wether the package name fits with the supplied regex\n                "}},{"$":{"name":"com.jmv.title","value":"PackageName check"}}],"property":[{"$":{"name":"format","value":"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$"}},{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"TypeNameCheck"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"typenamecheckchecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Validates classes and interfaces against the \"^[A-Z][a-zA-Z0-9]*$\". regex\n                "}},{"$":{"name":"com.jmv.title","value":"TypeNameCheck check"}},{"$":{"name":"altname","value":"TypeName"}}],"property":[{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"ConstantNameCheck"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"constantnamecheckchecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Validates non-private, static, final fields against the supplied public/package final fields.\n                "}},{"$":{"name":"com.jmv.title","value":"ConstantNameCheck check"}},{"$":{"name":"altname","value":"ConstantName"}}],"property":[{"$":{"name":"applyToPublic","value":"true"}},{"$":{"name":"applyToProtected","value":"true"}},{"$":{"name":"applyToPackage","value":"true"}},{"$":{"name":"applyToPrivate","value":"false"}},{"$":{"name":"format","value":"^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$"}},{"$":{"name":"severity","value":"warning"}}],"message":[{"$":{"key":"name.invalidPattern","value":"Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."}}]},{"$":{"name":"StaticVariableNameCheck"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"staticvariablenamecheckchecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Validates static, non-final fields against the supplied expression\n                "}},{"$":{"name":"com.jmv.title","value":"StaticVariableNameCheck check"}},{"$":{"name":"altname","value":"StaticVariableName"}}],"property":[{"$":{"name":"applyToPublic","value":"true"}},{"$":{"name":"applyToProtected","value":"true"}},{"$":{"name":"applyToPackage","value":"true"}},{"$":{"name":"applyToPrivate","value":"true"}},{"$":{"name":"format","value":"^[a-z][a-zA-Z0-9]*_?$"}},{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"MemberNameCheck"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"membernamecheckchecker"}},{"$":{"name":"com.jmv.helptext","value":"\n                Validates non-static members against the supplied expression.\n                "}},{"$":{"name":"com.jmv.title","value":"MemberNameCheck check"}},{"$":{"name":"altname","value":"MemberName"}}],"property":[{"$":{"name":"applyToPublic","value":"true"}},{"$":{"name":"applyToProtected","value":"true"}},{"$":{"name":"applyToPackage","value":"true"}},{"$":{"name":"applyToPrivate","value":"true"}},{"$":{"name":"format","value":"^[a-z][a-zA-Z0-9]*$"}},{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"MethodNameCheck"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"methodnamecheckchecker"}},{"$":{"name":"com.jmv.helptext","value":"\n               Validates identifiers for method names.\n                "}},{"$":{"name":"com.jmv.title","value":"MethodNameCheck check"}},{"$":{"name":"altname","value":"MethodName"}}],"property":[{"$":{"name":"format","value":"^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"}},{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"ParameterName"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"parameternamechecker"}},{"$":{"name":"com.jmv.helptext","value":"\n               Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\".\n                "}},{"$":{"name":"com.jmv.title","value":"ParameterName check"}}],"property":[{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"LocalFinalVariableName"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"localfinalvariablenamechecker"}},{"$":{"name":"com.jmv.helptext","value":"\n               Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\".\n                "}},{"$":{"name":"com.jmv.title","value":"LocalFinalVariableName check"}}],"property":[{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"LocalVariableName"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"localvariablenamechecker"}},{"$":{"name":"com.jmv.helptext","value":"\n               Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\".\n                "}},{"$":{"name":"com.jmv.title","value":"LocalVariableName check"}}],"property":[{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"LineLength"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"linelengthchecker"}},{"$":{"name":"com.jmv.helptext","value":"\n               Checks if a line is too long.\n               The default ignore pattern exempts the following elements:\n                  - import statements\n                  - long URLs inside comments\n                "}},{"$":{"name":"com.jmv.title","value":"LineLength check"}}],"property":[{"$":{"name":"max","value":"100","default":"100"}},{"$":{"name":"severity","value":"error"}},{"$":{"name":"ignorePattern","value":"^(package .*;\\s*)|(import .*;\\s*)|( *\\* *https?://.*)$","default":"^(package .*;\\s*)|(import .*;\\s*)|( *\\* *https?://.*)$"}}]},{"$":{"name":"LeftCurly"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"leftcurlychecker"}},{"$":{"name":"com.jmv.title","value":"LeftCurly check"}},{"$":{"name":"com.jmv.helptext","value":"\n               Checks for placement of the left curly brace (\"{\")\n                "}}],"property":[{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"RightCurly"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"rightcurlychecker"}},{"$":{"name":"com.jmv.title","value":"RightCurly check"}},{"$":{"name":"com.jmv.helptext","value":"\n               Checks right curlies on CATCH, ELSE, and TRY blocks are on\n      the same line. e.g., the following example is fine:\n      <pre>\n        if {\n          ...\n        } else</pre>\n      This next example is not fine:\n      <pre>\n        if {\n          ...\n        }\n        else</pre>\n                "}}],"property":[{"$":{"name":"option","value":"same"}},{"$":{"name":"severity","value":"warning"}}]}]},{"$":{"name":"RegexpSingleline"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"copyrightchecker"}},{"$":{"name":"com.jmv.title","value":"Copyright check"}},{"$":{"name":"com.jmv.helptext","value":"\n  Requires a copyright notice in each file.\n  Code intended to be open-sourced may have a multi-line copyright\n  notice, so that this required text appears on the second line:\n  <pre>\n/*\n* Copyright 20XX Company name.\n*\n* (details of open-source license...)\n*/</pre>"}}],"property":[{"$":{"name":"format","value":"^(//| \\*) Copyright (\\([cC]\\) )?[\\d]{4}(\\-[\\d]{4})? (Company name\\.).*$"}},{"$":{"name":"minimum","value":"1"}},{"$":{"name":"maximum","value":"10"}},{"$":{"name":"message","value":"Copyright is missing or malformed."}},{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"FileTabCharacter"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"tabchecker"}},{"$":{"name":"com.jmv.helptext","value":"Checks that there are no tab characters in the file"}},{"$":{"name":"com.jmv.title","value":"Tab check"}}],"property":[{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"NewlineAtEndOfFile"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"newlineatendoffilechecker"}},{"$":{"name":"com.jmv.helptext","value":"Checks whether files end with a new line. Rationale: Any source files and text files in general should end with a newline character, especially when using SCM systems such as CVS. CVS will even print a warning when it encounters a file that doesn't end with a newline."}},{"$":{"name":"com.jmv.title","value":"NewlineAtEndOfFile check"}}],"property":[{"$":{"name":"lineSeparator","value":"system"}},{"$":{"name":"fileExtensions","value":"java"}},{"$":{"name":"severity","value":"warning"}}]},{"$":{"name":"RegexpSingleline"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"nofixmechecker"}},{"$":{"name":"com.jmv.title","value":"No Fixme check"}},{"$":{"name":"com.jmv.helptext","value":"Checks that FIXME is not used in comments.  TODO is preferred."}}],"property":[{"$":{"name":"format","value":"((//.*)|(\\*.*))FIXME"}},{"$":{"name":"message","value":"TODO is preferred to FIXME.  e.g. \"TODO(johndoe): Refactor when v2 is released.\""}}]},{"$":{"name":"RegexpSingleline"},"metadata":[{"$":{"name":"com.jmv.identifier","value":"todonamedchecker"}},{"$":{"name":"com.jmv.title","value":"Todos named check"}},{"$":{"name":"com.jmv.helptext","value":"Checks that TODOs are named.  (Actually, just that they are followed by an open paren."}}],"property":[{"$":{"name":"format","value":"((//.*)|(\\*.*))TODO[^(]"}},{"$":{"name":"message","value":"All TODOs should be named.  e.g. \"TODO(johndoe): Refactor when v2 is released.\""}}]}]}}
      };
    
    var $anchorScroll = jasmine.createSpy('anchorScroll');

    beforeEach(inject(function($rootScope, $httpBackend, $controller, configService, $anchorScroll) {
        anchorScroll = $anchorScroll;
        httpBackend = $httpBackend;
        scope = $rootScope.$new();
        configService = configServiceMock;
        createController = function() {
            return $controller('ConfigFormCtrl', {
                '$scope': scope,
                'configService': configServiceMock
            });
        };
    }));


    it('it generates a form obj, a model, and schema without error', function() {
        var controller = createController();
        scope.$digest();
        expect(scope.form.length).toEqual(30);
        expect(Object.keys(scope.model).length).toEqual(75);
        expect(Object.keys(scope.schema).length).toEqual(2);
    });
});



describe('UploadCtrl', function() {
    beforeEach(module('myQmpj.services'));
    beforeEach(module('angularFileUpload'));
    var scope, createController;
    
    var lastResultServiceMock = {
        resultName: 'test',
        getLastResult: function() {
            return 'test';
        },
        setLastResult: function(name) {
        }
    }

    beforeEach(inject(function($rootScope, $controller,$upload, $location, lastResultService) {  
        scope = $rootScope.$new();
        lastResultService = lastResultServiceMock;
        createController = function() {
            return $controller('UploadCtrl', {
                '$scope': scope,
                'lastResultService' : lastResultService
            });
        };
    }));


    it('runs without errors and returns an error if no files selected', function() {
        var controller = createController();
        scope.$digest();
        expect(scope.$parent.alerts).toEqual([]);
        scope.onFileSelect([]);
        expect(scope.$parent.alerts.length > 0).toEqual(true);
        
    });  
});

describe('ResultsCtrl', function() {
    beforeEach(module('myQmpj.services'));
    beforeEach(module('myQmpj.filters'));

    var scope, createController;
    
    var lastResultServiceMock = {
        resultName: 'test',
        getLastResult: function() {return 'test';},
        setLastResult: function(name) {}
    }


    beforeEach(inject(function($rootScope, $controller, $httpBackend, _lastResultService_, $filter) {  
        scope = $rootScope.$new();
        lastResultService = _lastResultService_;
        routeParams =   {
            id: "123"
        };
        httpBackend = $httpBackend;
        createController = function() {
            return $controller('ResultsCtrl', {
                '$scope': scope,
                'lastResultService' : lastResultServiceMock,
                '$routeParams' : routeParams,
                'httpBackend' : httpBackend
            }); 
        };
    }));
    it('runs without errors and returns all the charts', function() {
        httpBackend.whenGET("/results/api/123").respond(
            {"currentUrl":"/results/J536ZWZLWCZK","title":"JMV Results","result":{"src/server/application/Kunde.java":{"source":["package server.application;\r","\r","public class Kunde {\r","\r","    private String name;\r","    private int nummer;\r","\r","    public String getName() {\r","        return name;\r","    }\r","\r","    public int getNummer() {\r","        return nummer;\r","    }\r","\r","    public void setName(String name) {\r","        this.name = name;\r","    }\r","\r","    public void setNummer(int nummer) {\r","        this.nummer = nummer;\r","    }\r","}\r"]},"src/server/application/ServerProtokoll.java":{"source":["package server.application;\r","\r","import static server.schnittstelle.KommandoKonstante.*;\r","import java.util.List;\r","\r","public class ServerProtokoll {\r","\r","    public String bearbeiteEingabe(String eingabe) {\r","        String ausgabe = null;\r","\r","        if (eingabe.startsWith(CMD_EINFUEGE_KUNDE_PREFIX)) {\r","            List<String> args = getCommandArguments(eingabe);\r","            if (args.size() == 2) {\r","                KundenContainerEinfach.getObjektreferenz().einfuegeKunde(args.get(1), Integer.parseInt(args.get(0)));\r","            }\r","            ausgabe = OKAY;\r","        } else if (eingabe.equals(CMD_GET_NAECHSTE_KUNDEN_NR)) {\r","            int kundennr = KundenContainerEinfach.getObjektreferenz().getNaechsteKundenNr();\r","            ausgabe = String.format(OKAY_1_PARAM, kundennr);\r","        } else if (eingabe.startsWith(CMD_GET_KUNDE_ZU_NR_PREFIX)) {\r","            ausgabe = OKAY;\r","            List<String> args = getCommandArguments(eingabe);\r","            if (!args.isEmpty()) {\r","                int kndNr = Integer.parseInt(args.get(0));\r","                Kunde k = new Kunde();\r","                k.setName(KundenContainerEinfach.getObjektreferenz().getKundeZuNr(kndNr));\r","                k.setNummer(kndNr);\r","                if (!(k.getName().equals(\"\"))) {\r","                    ausgabe = String.format(OKAY_1_PARAM, k.getName());\r","                }\r","            }\r","        } else if (eingabe.equals(CMD_ENDE_ANWENDUNG)) {\r","            KundenContainerEinfach.getObjektreferenz().endeAnwendung();\r","            ausgabe = \"Bye.\";\r","        } else if (eingabe.equals(CMD_GET_DATUM_UHRZEIT)) {\r","            String uhrzeit = KundenContainerEinfach.getObjektreferenz().getDatumUhrzeit();\r","            ausgabe = String.format(OKAY_1_PARAM, uhrzeit);\r","        } else {\r","            ausgabe = FEHLER; // Kommando unbekannt\r","        }\r","\r","        return ausgabe;\r","    }\r","}\r"]},"src/server/application/KundenContainerEinfach.java":{"source":["package server.application;\r","\r","/**\r"," * Container zum Verwalten von Kunden. Im Konstruktor werden bereits vorhandene\r"," * Kunden ausgelesen und in eine ArrayList gespeichert. Erst beim Beenden der\r"," * Anwendung werden die Kunden der ArrayList persistent gespeichert.\r"," *\r"," */\r","import java.text.DateFormat;\r","import java.text.SimpleDateFormat;\r","import java.util.*;\r","import server.persistence.ObjektSpeicher;\r","import server.schnittstelle.KundenContainerEinfachI;\r","\r","public class KundenContainerEinfach implements KundenContainerEinfachI {\r","    //Attribute\r","\r","    private ObjektSpeicher eineObjektDatei;\r","    //Singleton-Muster\r","    private static KundenContainerEinfach einKundeContainer = null;\r","    //Verwaltung der Kunden\r","    private ArrayList<Kunde> meineKunden = new ArrayList<Kunde>();\r","\r","    /**\r","     * @SuppressWarnings(\"unchecked\") unterdrueckt bestimmte Compiler-Warnungen.\r","     * Dies ist notwendig, da der Cast zu \"ArrayList<Kunde>\" nicht geprueft ist.\r","     */\r","    @SuppressWarnings({\"unchecked\"})\r","    private KundenContainerEinfach() {\r","        /*\r","         * Gespeicherte Daten einlesen.\r","         * Falls noch keine Daten gespeichert wurden, kann keine\r","         * Datei gelesen werden, es gibt dann eine Ausnahme\r","         */\r","        eineObjektDatei = new ObjektSpeicher();\r","        try {\r","            meineKunden = (ArrayList<Kunde>) eineObjektDatei.leseObjekt();\r","            if (meineKunden == null) {\r","                meineKunden = new ArrayList<Kunde>();\r","            }\r","        } catch (Exception e) {\r","            /*\r","             * Wenn keine Daten gelesen werden konnten, muss eine\r","             * neue Datenbasis angelegt werden\r","             */\r","            System.out.println(\"Es wurde eine neue Datenbasis angelegt\");\r","            meineKunden = new ArrayList<Kunde>();\r","        }\r","    }\r","\r","    /*\r","     * Klassen-Operation, die die Objektreferenz liefert.\r","     * Wenn das Objekt noch nicht vorhanden ist, dann wird es erzeugt\r","     */\r","    public static KundenContainerEinfach getObjektreferenz() {\r","        if (einKundeContainer == null) {\r","            einKundeContainer = new KundenContainerEinfach();\r","        }\r","        return einKundeContainer;\r","    }\r","\r","    /*\r","     * Die Schnittstelle KundeContainerEinfachI besitzt nur einfache Datentypen\r","     * fuer die Kommunikation. Die Klasse KundeContainerEinfach (genauso wie\r","     * die Klasse ServerProxy) implementieren diese Schnittstelle. Da die Methode\r","     * getKundeZuNr keine Referenz auf ein Kundenobjekt zurueckgibt, welches\r","     * bearbeitet werden koennte, muss die ArrayList noch einmal durchlaufen werden. \r","     */\r","    public void einfuegeKunde(String name, int nummer) {\r","        //Pruefen, ob der Kunde bereits vorhanden ist\r","        if (getKundeZuNr(nummer).equals(\"\")) {\r","            //Kunde noch nicht vorhanden\r","            Kunde einKunde = new Kunde();\r","            einKunde.setName(name);\r","            einKunde.setNummer(nummer);\r","            meineKunden.add(einKunde);\r","        } else {\r","            /*\r","             * Kunde ist bereits vorhanden und soll ueberschrieben werden,\r","             * daher ArrayList durchsuchen, Kunde auslesen und Werte entsprechend aendern.\r","             */\r","            Iterator<Kunde> iter = meineKunden.iterator();\r","            while (iter.hasNext()) {\r","                Kunde kunde = iter.next();\r","                if (kunde.getNummer() == nummer) {\r","                    kunde.setName(name);\r","                }\r","            }\r","        }\r","    }\r","\r","    public int getNaechsteKundenNr() {\r","        int max = 0;\r","        Iterator<Kunde> iter = meineKunden.iterator();\r","        while (iter.hasNext()) {\r","            Kunde kunde = iter.next();\r","            max = Math.max(max, kunde.getNummer());\r","        }\r","        return max + 1;\r","    }\r","\r","    //Liefert den Kunden mit der angegebenen Nummer\r","    public String getKundeZuNr(int nummer) {\r","        Iterator<Kunde> iter = meineKunden.iterator();\r","        while (iter.hasNext()) {\r","            Kunde kunde = iter.next();\r","            if (kunde.getNummer() == nummer) {\r","                return kunde.getName();\r","            }\r","        }\r","        return \"\";\r","    }\r","\r","    //Liefert die aktuelle Uhrzeit\r","    public String getDatumUhrzeit() {\r","        DateFormat dateFormat = new SimpleDateFormat(\"dd.MM.yyyy HH:mm:ss\");\r","        return dateFormat.format(Calendar.getInstance().getTime());\r","    }\r","\r","    //Methode zum Speichern der Daten\r","    public void endeAnwendung() {\r","        eineObjektDatei.speichereObjekt(meineKunden);\r","        System.out.println(\"Datenbasis wurde gespeichert\");\r","    }\r","}"]},"src/server/persistence/ObjektSpeicher.java":{"source":["package server.persistence;\r","/* Programmname: Objektspeicherung\r"," * Datenhaltungs-Klasse: ObjektDatei\r"," * Aufgabe: Eine Objekt nach und von\r"," * XML serialisieren. \r"," */\r","\r","import java.io.*;\r","import java.beans.*;\r","\r","public class ObjektSpeicher {\r","    //Name der Datei, in der die Kunden gespeichert werden sollen\r","\r","    private String einDateiname = \"Datenbasis.xml\";\r","\r","    public ObjektSpeicher() {\r","    }\r","\r","    public void speichereObjekt(Object einObjekt) {\r","        try {\r","            XMLEncoder e =\r","                    new XMLEncoder(new BufferedOutputStream(new FileOutputStream(einDateiname)));\r","            e.writeObject(einObjekt);\r","            e.close();\r","        } catch (FileNotFoundException e) {\r","            System.out.println(\"Fehler in speichereObjekt: \" + e);\r","        }\r","    }\r","\r","    public Object leseObjekt() throws Exception {\r","        XMLDecoder d = new XMLDecoder(new BufferedInputStream(new FileInputStream(einDateiname)));\r","        Object result = d.readObject();\r","        d.close();\r","        return result;\r","    }\r","}\r"]},"src/server/schnittstelle/KundenContainerEinfachI.java":{"source":["package server.schnittstelle;\r","\r","/**\r"," * Schnittstelle fuer die Uebertragung von einfachen Datentypen.\r"," */\r","public interface KundenContainerEinfachI {\r","\r","    public void einfuegeKunde(String name, int nummer);\r","\r","    public int getNaechsteKundenNr();\r","\r","    public String getKundeZuNr(int nummer);\r","\r","    public String getDatumUhrzeit();\r","\r","    public void endeAnwendung();\r","}"]},"src/server/schnittstelle/KommandoKonstante.java":{"source":["package server.schnittstelle;\r","\r","import java.util.ArrayList;\r","import java.util.List;\r","import java.util.StringTokenizer;\r","\r","public class KommandoKonstante {\r","\r","    private static final String TRENNZEICHEN = \"#\"; //zum Trennen von Argumenten\r","    //Kommandos, die vom Client kommen\r","    public static final String CMD_EINFUEGE_KUNDE_PREFIX = \"einfuegeKunde\";\r","    public static final String CMD_EINFUEGE_KUNDE = CMD_EINFUEGE_KUNDE_PREFIX\r","            + TRENNZEICHEN + \"%s\" + TRENNZEICHEN + \"%s\"; //2 Argumente\r","    public static final String CMD_GET_NAECHSTE_KUNDEN_NR = \"getNaechsteKundenNr\";\r","    public static final String CMD_GET_DATUM_UHRZEIT = \"getDatumUhrzeit\";\r","    public static final String CMD_GET_KUNDE_ZU_NR_PREFIX = \"getKundeZuNr\";\r","    public static final String CMD_GET_KUNDE_ZU_NR = CMD_GET_KUNDE_ZU_NR_PREFIX\r","            + TRENNZEICHEN + \"%s\"; //1 Argument\r","    public static final String CMD_ENDE_ANWENDUNG = \"endeAnwendung\";\r","    // Ruekgabewerte, die Server an Client sendet\r","    public static final String FEHLER = \"Fehler ist aufgetreten\";\r","    public static final String OKAY = \"Okay\";\r","    public static final String OKAY_1_PARAM = OKAY + TRENNZEICHEN + \"%s\";\r","\r","    //Auslesen der Argumente aus dem Kommando\r","    public static List<String> getCommandArguments(String command) {\r","        List<String> tokens = new ArrayList<String>();\r","        StringTokenizer st1 = new StringTokenizer(command, TRENNZEICHEN);\r","\r","        if (st1.hasMoreTokens()) {\r","            //den ersten ueberlesen:\r","            st1.nextToken();\r","            while (st1.hasMoreTokens()) {\r","                tokens.add(st1.nextToken());\r","            }\r","        }\r","\r","        return tokens;\r","    }\r","}"]},"src/server/ServerStart.java":{"source":["package server;\r","\r","import java.io.BufferedReader;\r","import java.io.IOException;\r","import java.io.InputStreamReader;\r","import java.io.PrintWriter;\r","import java.net.ServerSocket;\r","import java.net.Socket;\r","\r","import server.application.ServerProtokoll;\r","\r","class ServerStart {\r","\r","    private static final int PORT_NUMMER = 4444;\r","\r","    public static void main(String[] args) throws IOException {\r","        ServerSocket serverSocket = null;\r","        try {\r","            serverSocket = new ServerSocket(PORT_NUMMER);\r","        } catch (IOException e) {\r","            System.err.println(\"Kann nicht horchen auf dem Port: \" + PORT_NUMMER);\r","            System.exit(1);\r","        }\r","        System.out.println(\"Der Kundenverwaltungsserver(sockets) ist gestartet...\");\r","\r","        Socket clientSocket = null;\r","\r","        /*\r","         * \"dient\" einem Klienten nach dem anderen, endlos weiter\r","         * aber zu einem gegebenen Zeitpunkt immer nur einem Klienten\r","         */\r","        while (true) {\r","            try {\r","                clientSocket = serverSocket.accept();\r","            } catch (IOException e) {\r","                System.err.println(\"accept fehlgeschlagen.\");\r","                System.exit(1);\r","            }\r","\r","            PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\r","            BufferedReader in = new BufferedReader(\r","                    new InputStreamReader(\r","                    clientSocket.getInputStream()));\r","            String eingabeZeile, ausgabeZeile;\r","            ServerProtokoll protokoll = new ServerProtokoll();\r","            while ((eingabeZeile = in.readLine()) != null) {\r","                ausgabeZeile = protokoll.bearbeiteEingabe(eingabeZeile);\r","                out.println(ausgabeZeile);\r","                if (ausgabeZeile.equals(\"Bye.\")) {\r","                    break;\r","                }\r","            }\r","            out.close();\r","            in.close();\r","            clientSocket.close();\r","        }\r","    }\r","}\r"]},"src/client/application/ServerProxy.java":{"source":["package client.application;\r","\r","import java.io.BufferedReader;\r","import java.io.IOException;\r","import java.io.InputStreamReader;\r","import java.io.PrintWriter;\r","import java.net.Socket;\r","import java.net.UnknownHostException;\r","import java.util.List;\r","import javax.swing.JOptionPane;\r","import static server.schnittstelle.KommandoKonstante.*;\r","import server.schnittstelle.KundenContainerEinfachI;\r","\r","public class ServerProxy implements KundenContainerEinfachI {\r","    //Singleton-Muster\r","\r","    private static ServerProxy serverProxy = null;\r","    private final int PORT_NUMMER = 4444;\r","    private final String SERVER_NAME = \"localhost\";\r","    private PrintWriter out;\r","    private BufferedReader in;\r","    private Socket socket;\r","\r","    public ServerProxy() {\r","        socket = null;\r","        out = null;\r","        in = null;\r","\r","        try {\r","            socket = new Socket(SERVER_NAME, PORT_NUMMER);\r","            out = new PrintWriter(socket.getOutputStream(), true);\r","            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r","        } catch (UnknownHostException e) {\r","            String msg = \"Host unbekannt:\" + SERVER_NAME;\r","            JOptionPane.showMessageDialog(null, msg, \"Mitteilung\", JOptionPane.OK_OPTION);\r","            System.exit(1);\r","        } catch (IOException e) {\r","            String msg = \"Keine I/O Verbindung mÃ¶glich zu: \" + SERVER_NAME;\r","            JOptionPane.showMessageDialog(null, msg, \"Mitteilung\", JOptionPane.OK_OPTION);\r","            System.exit(1);\r","        }\r","    }\r","\r","    /*\r","     * Klassen-Operation, die die Objektreferenz liefert.\r","     * Wenn das Objekt noch nicht vorhanden ist, dann wird es erzeugt\r","     */\r","    public static ServerProxy getObjektreferenz() {\r","        if (serverProxy == null) {\r","            serverProxy = new ServerProxy();\r","        }\r","        return serverProxy;\r","    }\r","\r","    public void einfuegeKunde(String name, int nummer) {\r","        out.println(String.format(CMD_EINFUEGE_KUNDE, nummer, name));\r","        String antwort = readServerResponse();\r","        if (antwort.equals(FEHLER)) {\r","            try {\r","                throw new Exception();\r","            } catch (Exception e) {\r","                e.printStackTrace();\r","            }\r","        }\r","    }\r","\r","    public int getNaechsteKundenNr() {\r","        out.println(CMD_GET_NAECHSTE_KUNDEN_NR);\r","        String response = readServerResponse();\r","        if (response != null && response.startsWith(OKAY)) {\r","            List<String> args = getCommandArguments(response);\r","            if (!args.isEmpty()) {\r","                return Integer.parseInt(args.get(0));\r","            }\r","        }\r","        return 0;\r","    }\r","\r","    public String getDatumUhrzeit() {\r","        out.println(CMD_GET_DATUM_UHRZEIT);\r","        String response = readServerResponse();\r","        if (response != null && response.startsWith(OKAY)) {\r","            List<String> args = getCommandArguments(response);\r","            if (!args.isEmpty()) {\r","                return args.get(0);\r","            }\r","        }\r","        return \"\";\r","    }\r","\r","    public String getKundeZuNr(int nummer) {\r","        out.println(String.format(CMD_GET_KUNDE_ZU_NR, nummer));\r","\r","        String servResponse = readServerResponse();\r","        if (servResponse != null && servResponse.startsWith(OKAY)) {\r","            List<String> args = getCommandArguments(servResponse);\r","            if (!args.isEmpty()) {\r","                return args.get(0);\r","            }\r","            return \"\";\r","        }\r","\r","        // Dieser Bereich wird nur erreicht, wenn ein Fehler aufgetreten ist.\r","        try {\r","            throw new Exception();\r","        } catch (Exception e1) {\r","            e1.printStackTrace();\r","        }\r","        return null;\r","    }\r","\r","    public void endeAnwendung() {\r","        out.println(CMD_ENDE_ANWENDUNG);\r","        readServerResponse();\r","        out.close();\r","        try {\r","            in.close();\r","            socket.close();\r","        } catch (IOException e) {\r","            e.printStackTrace();\r","        }\r","    }\r","\r","    private String readServerResponse() {\r","        String response = null;\r","        try {\r","            response = in.readLine();\r","        } catch (IOException e) {\r","            e.printStackTrace();\r","        }\r","        return response;\r","    }\r","}\r"]},"src/client/gui/ClientStart.java":{"source":["package client.gui;\r","\r","import javax.swing.SwingUtilities;\r","\r","public class ClientStart {\r","\r","    public ClientStart() {\r","        SwingUtilities.invokeLater(new Runnable() {\r","            public void run() {\r","                /*\r","                 * Benutzungsoberflaeche aufbauen.\r","                 * Erzeugen des Anwendungsfensters\r","                 */\r","                new Kundenfenster(\"Kundenverwaltung\").setVisible(true);\r","            }\r","        });\r","    }\r","\r","    public static void main(String[] args) {\r","        new ClientStart();\r","    }\r","}\r"]},"src/client/gui/Kundenfenster.java":{"source":["package client.gui;\r","\r","import java.awt.*;\r","import java.awt.event.*;\r","import javax.swing.*;\r","\r","import client.application.ServerProxy;\r","\r","//Das Kundenfenster\r","public class Kundenfenster extends JFrame {\r","\r","    /**\r","     * Beim Serialisieren eines Objektes wird auch die serialVersionUID der\r","     * zugehoerigen Klasse mit in die Ausgabedatei geschrieben. Soll das Objekt\r","     * spaeter deserialisiert werden, so wird die in der Datei gespeicherte\r","     * serialVersionUID mit der aktuellen serialVersionUID des geladenen\r","     * .class-Files verglichen. Stimmen beide nicht ueberein, so gibt es eine\r","     * Ausnahme des Typs InvalidClassException, und der Deserialisierungsvorgang\r","     * bricht ab.\r","     */\r","    private static final long serialVersionUID = -7652791675920389173L;\r","\r","    private enum OperationsModus {\r","\r","        NEUER_KUNDE, KUNDE_SUCHEN\r","    };\r","    private Font meineSchrift = new Font(\"Dialog\", Font.PLAIN, 12);\r","    //Alle Fuehrungstexte\r","    private JLabel kundennrFuehrungstextJ = new JLabel(\"Kundennr.\");\r","    private JLabel nameFuehrungstextJ = new JLabel(\"Name\");\r","    private JLabel datumUhrzeitFuehrungstextJ = new JLabel(\"Uhrzeit\");\r","    //Alle Textfelder\r","    private JTextField kundennrTextFeldJ = new JTextField();\r","    private JTextField nameTextFeldJ = new JTextField();\r","    private JTextField datumUhrzeitTextFeldJ = new JTextField();\r","    //Alle Flaechen\r","    private JPanel nameFlaecheJ = new JPanel();\r","    //Alle Druckknoepfe\r","    private JButton neuerKundeKnopfJ = new JButton(\"Neuer Kunde\");\r","    private JButton suchfunktionKnopfJ = new JButton(\"Suchfunktion\");\r","    private JButton suchenKnopfJ = new JButton(\"Suchen\");\r","    private JButton speichernKnopfJ = new JButton(\"Speichern\");\r","    private JButton datumUhrzeitKnopfJ = new JButton(\"Abfragen\");\r","\r","    public Kundenfenster(String fenstertitel) {\r","        super(fenstertitel);\r","\r","        //Layout und Hintergrund des obersten Containers setzen\r","        getContentPane().setLayout(null);\r","        getContentPane().setBackground(Color.lightGray);\r","\r","        //Flaeche einstellen\r","        getContentPane().add(nameFlaecheJ);\r","        nameFlaecheJ.setLayout(null);\r","        nameFlaecheJ.setBackground(new java.awt.Color(226, 226, 226));\r","        nameFlaecheJ.setBounds(25, 140, 334, 60);\r","\r","        //Fuehrungstext fuer Kundennr.\r","        getContentPane().add(kundennrFuehrungstextJ);\r","        kundennrFuehrungstextJ.setFont(meineSchrift);\r","        kundennrFuehrungstextJ.setBounds(30, 63, 84, 24);\r","\r","        //Fuehrungstext fuer Uhrzeit\r","        getContentPane().add(datumUhrzeitFuehrungstextJ);\r","        datumUhrzeitFuehrungstextJ.setFont(meineSchrift);\r","        datumUhrzeitFuehrungstextJ.setBounds(30, 103, 84, 24);\r","\r","        //Fuehrungstext fuer Name\r","        nameFlaecheJ.add(nameFuehrungstextJ);\r","        nameFuehrungstextJ.setFont(meineSchrift);\r","        nameFuehrungstextJ.setBounds(6, 19, 72, 24);\r","\r","        //Textfeld fuer Kundennr.\r","        getContentPane().add(kundennrTextFeldJ);\r","        kundennrTextFeldJ.setBackground(new Color(255, 255, 159));\r","        kundennrTextFeldJ.setBounds(101, 65, 73, 24);\r","        kundennrTextFeldJ.setEditable(false);\r","\r","        //Textfeld fuer Uhrzeit\r","        getContentPane().add(datumUhrzeitTextFeldJ);\r","        datumUhrzeitTextFeldJ.setBackground(new Color(255, 255, 159));\r","        datumUhrzeitTextFeldJ.setBounds(101, 105, 123, 24);\r","        datumUhrzeitTextFeldJ.setEditable(false);\r","\r","        //Textfeld fuer Name\r","        nameFlaecheJ.add(nameTextFeldJ);\r","        nameTextFeldJ.setBackground(Color.white);\r","        nameTextFeldJ.setBounds(75, 21, 240, 24);\r","        nameTextFeldJ.setEditable(true);\r","\r","        //Knopf \"Neuer Kunde\"\r","        getContentPane().add(neuerKundeKnopfJ);\r","        neuerKundeKnopfJ.setBounds(25, 12, 152, 30);\r","\r","        //Knopf \"Suchfunktion\"\r","        getContentPane().add(suchfunktionKnopfJ);\r","        suchfunktionKnopfJ.setBounds(211, 12, 149, 30);\r","\r","        //Knopf \"Suchen\"\r","        getContentPane().add(suchenKnopfJ);\r","        suchenKnopfJ.setBounds(180, 63, 77, 28);\r","\r","        //Knopf \"Speichern\"\r","        getContentPane().add(speichernKnopfJ);\r","        speichernKnopfJ.setBounds(262, 62, 99, 29);\r","\r","        //Knopf \"Aktuelle Uhrzeit\"\r","        getContentPane().add(datumUhrzeitKnopfJ);\r","        datumUhrzeitKnopfJ.setBounds(262, 102, 99, 29);\r","\r","        //Aktionsabhoerer \"Neuer Kunde\"\r","        neuerKundeKnopfJ.addActionListener(new ActionListener() {\r","            @Override\r","            public void actionPerformed(ActionEvent arg0) {\r","                wechsleZuModus(OperationsModus.NEUER_KUNDE);\r","            }\r","        });\r","\r","        //Aktionsabhoerer \"Suchfunktion\"\r","        suchfunktionKnopfJ.addActionListener(new ActionListener() {\r","            @Override\r","            public void actionPerformed(ActionEvent arg0) {\r","                wechsleZuModus(OperationsModus.KUNDE_SUCHEN);\r","            }\r","        });\r","\r","        //Aktionsabhoerer \"Suchen\"\r","        suchenKnopfJ.addActionListener(new ActionListener() {\r","            @Override\r","            public void actionPerformed(ActionEvent arg0) {\r","                sucheKunde();\r","            }\r","        });\r","\r","        //Aktionsabhoerer \"Speichern\"\r","        speichernKnopfJ.addActionListener(new ActionListener() {\r","            @Override\r","            public void actionPerformed(ActionEvent arg0) {\r","                speichernAktion();\r","            }\r","        });\r","\r","        //Aktionsabhoerer \"Speichern\"\r","        datumUhrzeitKnopfJ.addActionListener(new ActionListener() {\r","            @Override\r","            public void actionPerformed(ActionEvent arg0) {\r","                datumUhrzeitAktion();\r","            }\r","        });\r","\r","        //Tastenabhoerer fuer \"Kundennr.\" (beliebige Tasteneingabe)\r","        kundennrTextFeldJ.addKeyListener(new KeyAdapter() {\r","            @Override\r","            public void keyTyped(KeyEvent arg0) {\r","                nameTextFeldJ.setText(\"\");\r","            }\r","        });\r","\r","        //Fensterabhoerer\r","        this.addWindowListener(new WindowAdapter() {\r","            @Override\r","            public void windowClosing(WindowEvent arg0) {\r","                ServerProxy.getObjektreferenz().endeAnwendung();\r","                System.exit(0);\r","            }\r","        });\r","\r","        //Groesse und Groessenveraenderung des obersten Containers setzen\r","        setSize(381, 239);\r","        setResizable(false);\r","\r","        //Erster Start, daher in den Modus \"NEUER_KUNDE\" wechseln\r","        wechsleZuModus(OperationsModus.NEUER_KUNDE);\r","    }\r","\r","    private void sucheKunde() {\r","        if (kundennrTextFeldJ.getText().isEmpty()) {\r","            zuruecksetzen();\r","            return;\r","        }\r","        String nummer = kundennrTextFeldJ.getText();\r","        try {\r","            int nr = Integer.valueOf(nummer);\r","            String name = ServerProxy.getObjektreferenz().getKundeZuNr(nr);\r","            if (!(name.equals(\"\"))) {\r","                nameTextFeldJ.setText(name);\r","                kundennrTextFeldJ.setEditable(true);\r","                suchenKnopfJ.setVisible(true);\r","            } else {\r","                JOptionPane.showMessageDialog(\r","                        Kundenfenster.this,\r","                        \"Kunde mit Nr. \" + nummer + \" konnte nicht gefunden werden.\",\r","                        \"Mitteilung\",\r","                        JOptionPane.OK_OPTION);\r","                zuruecksetzen();\r","            }\r","            return;\r","        } catch (Exception e) {\r","            JOptionPane.showMessageDialog(\r","                    Kundenfenster.this,\r","                    \"Fehlerhafte Eingabe!\",\r","                    \"Mitteilung\",\r","                    JOptionPane.OK_OPTION);\r","            zuruecksetzen();\r","        }\r","    }\r","\r","    private void wechsleZuModus(OperationsModus opModus) {\r","        switch (opModus) {\r","            case KUNDE_SUCHEN:\r","                suchenKnopfJ.setVisible(true);\r","                kundennrTextFeldJ.setText(\"\");\r","                kundennrTextFeldJ.setEditable(true);\r","                suchfunktionKnopfJ.setEnabled(false);\r","                break;\r","            case NEUER_KUNDE:\r","                suchenKnopfJ.setVisible(false);\r","                kundennrTextFeldJ.setEditable(false);\r","                int kundennr = ServerProxy.getObjektreferenz().getNaechsteKundenNr();\r","                kundennrTextFeldJ.setText(Integer.toString(kundennr));\r","                suchfunktionKnopfJ.setEnabled(true);\r","                break;\r","        }\r","        nameTextFeldJ.setText(\"\");\r","    }\r","\r","    //Alle Daten uebernehmen \r","    private void speichernAktion() {\r","        if (schreibeKunde())//Konnten alle Daten uebernommen werden?\r","        {\r","            try {\r","                ServerProxy.getObjektreferenz().einfuegeKunde(\r","                        nameTextFeldJ.getText(),\r","                        Integer.valueOf(kundennrTextFeldJ.getText()));\r","            } catch (Exception e) {\r","                JOptionPane.showMessageDialog(Kundenfenster.this, e.getLocalizedMessage(), \"Mitteilung\", JOptionPane.OK_OPTION);\r","            }\r","        }\r","    }\r","\r","    // Aktuelle Uhrzeit abfragen \r","    private void datumUhrzeitAktion() {\r","        try {\r","            String datumUhrzeit = ServerProxy.getObjektreferenz().getDatumUhrzeit();\r","\r","            if (!(datumUhrzeit.equals(\"\"))) {\r","                datumUhrzeitTextFeldJ.setText(datumUhrzeit);\r","            } else {\r","                JOptionPane.showMessageDialog(\r","                        Kundenfenster.this,\r","                        \"Datum und Uhrzeit konnte nicht aktualisiert werden!\",\r","                        \"Mitteilung\",\r","                        JOptionPane.OK_OPTION);\r","                zuruecksetzen();\r","            }\r","            return;\r","        } catch (Exception e) {\r","            JOptionPane.showMessageDialog(\r","                    Kundenfenster.this,\r","                    \"Datum und Uhrzeit konnte nicht aktualisiert werden!\",\r","                    \"Mitteilung\",\r","                    JOptionPane.OK_OPTION);\r","            zuruecksetzen();\r","        }\r","    }\r","\r","    /*\r","     * Alle Daten aus den Eingabeelementen uebernehmen.\r","     * Gibt true zurueck, falls erfolgreich, ansonsten false.\r","     */\r","    public boolean schreibeKunde() {\r","        String nummer = kundennrTextFeldJ.getText();\r","        String name = nameTextFeldJ.getText();\r","\r","        if (nummer.length() == 0 || name.length() == 0) {\r","            JOptionPane.showMessageDialog(\r","                    this,\r","                    \"Es sind Mussfelder nicht ausgefuellt!\",\r","                    \"Mitteilung\",\r","                    JOptionPane.OK_OPTION);\r","            return false;\r","        }\r","        try {\r","            @SuppressWarnings(\"unused\")\r","            int nr = Integer.valueOf(nummer);\r","            return true;\r","        } catch (Exception e) {\r","            e.printStackTrace();\r","            return false;\r","        }\r","    }\r","\r","    //Alle Eingabeelemente zuruecksetzen\r","    public void zuruecksetzen() {\r","        kundennrTextFeldJ.setText(\"\");\r","        nameTextFeldJ.setText(\"\");\r","    }\r","}"]}},"checkstyleResults":{"checkstyle":{"$":{"version":"5.4"},"file":[{"$":{"name":"/root/prototype/jmv/results/J536ZWZLWCZK/files/src/server/application/Kunde.java"},"error":[{"$":{"line":"0","severity":"warning","message":"Copyright is missing or malformed.","source":"com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"}},{"$":{"line":"3","severity":"error","message":"Missing a Javadoc comment.","source":"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck"}}]},{"$":{"name":"/root/prototype/jmv/results/J536ZWZLWCZK/files/src/server/application/ServerProtokoll.java"},"error":[{"$":{"line":"0","severity":"warning","message":"Copyright is missing or malformed.","source":"com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"}},{"$":{"line":"6","severity":"error","message":"Missing a Javadoc comment.","source":"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck"}},{"$":{"line":"8","column":"5","severity":"warning","message":"Cyclomatic Complexity is 9 (max allowed is 5).","source":"com.puppycrawl.tools.checkstyle.checks.metrics.CyclomaticComplexityCheck"}},{"$":{"line":"14","severity":"error","message":"Line is longer than 100 characters.","source":"com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"}}]},{"$":{"name":"/root/prototype/jmv/results/J536ZWZLWCZK/files/src/server/application/KundenContainerEinfach.java"},"error":[{"$":{"line":"0","severity":"warning","message":"Copyright is missing or malformed.","source":"com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"}},{"$":{"line":"0","severity":"warning","message":"File does not end with a newline.","source":"com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck"}},{"$":{"line":"15","severity":"error","message":"Missing a Javadoc comment.","source":"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck"}}]},{"$":{"name":"/root/prototype/jmv/results/J536ZWZLWCZK/files/src/server/persistence/ObjektSpeicher.java"},"error":[{"$":{"line":"0","severity":"warning","message":"Copyright is missing or malformed.","source":"com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"}},{"$":{"line":"9","severity":"warning","message":"Wrong order for 'java.beans.*' import.","source":"com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck"}},{"$":{"line":"11","severity":"error","message":"Missing a Javadoc comment.","source":"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck"}}]},{"$":{"name":"/root/prototype/jmv/results/J536ZWZLWCZK/files/src/server/schnittstelle/KundenContainerEinfachI.java"},"error":[{"$":{"line":"0","severity":"warning","message":"Copyright is missing or malformed.","source":"com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"}},{"$":{"line":"0","severity":"warning","message":"File does not end with a newline.","source":"com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck"}}]},{"$":{"name":"/root/prototype/jmv/results/J536ZWZLWCZK/files/src/server/schnittstelle/KommandoKonstante.java"},"error":[{"$":{"line":"0","severity":"warning","message":"Copyright is missing or malformed.","source":"com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"}},{"$":{"line":"0","severity":"warning","message":"File does not end with a newline.","source":"com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck"}},{"$":{"line":"7","severity":"error","message":"Missing a Javadoc comment.","source":"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck"}}]},{"$":{"name":"/root/prototype/jmv/results/J536ZWZLWCZK/files/src/server/ServerStart.java"},"error":[{"$":{"line":"0","severity":"warning","message":"Copyright is missing or malformed.","source":"com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"}},{"$":{"line":"16","column":"5","severity":"warning","message":"Cyclomatic Complexity is 6 (max allowed is 5).","source":"com.puppycrawl.tools.checkstyle.checks.metrics.CyclomaticComplexityCheck"}}]},{"$":{"name":"/root/prototype/jmv/results/J536ZWZLWCZK/files/src/client/application/ServerProxy.java"},"error":[{"$":{"line":"0","severity":"warning","message":"Copyright is missing or malformed.","source":"com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"}},{"$":{"line":"14","severity":"error","message":"Missing a Javadoc comment.","source":"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck"}},{"$":{"line":"18","column":"23","severity":"warning","message":"Name 'PORT_NUMMER' must match pattern '^[a-z][a-zA-Z0-9]*$'.","source":"com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck"}},{"$":{"line":"19","column":"26","severity":"warning","message":"Name 'SERVER_NAME' must match pattern '^[a-z][a-zA-Z0-9]*$'.","source":"com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck"}}]},{"$":{"name":"/root/prototype/jmv/results/J536ZWZLWCZK/files/src/client/gui/ClientStart.java"},"error":[{"$":{"line":"0","severity":"warning","message":"Copyright is missing or malformed.","source":"com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"}},{"$":{"line":"5","severity":"error","message":"Missing a Javadoc comment.","source":"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck"}}]},{"$":{"name":"/root/prototype/jmv/results/J536ZWZLWCZK/files/src/client/gui/Kundenfenster.java"},"error":[{"$":{"line":"0","severity":"warning","message":"Copyright is missing or malformed.","source":"com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"}},{"$":{"line":"0","severity":"warning","message":"File does not end with a newline.","source":"com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck"}},{"$":{"line":"10","severity":"error","message":"Missing a Javadoc comment.","source":"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck"}},{"$":{"line":"10","column":"1","severity":"warning","message":"Class Data Abstraction Coupling is 10 (max allowed is 7) classes [ActionListener, Color, Font, JButton, JLabel, JPanel, JTextField, KeyAdapter, WindowAdapter, java.awt.Color].","source":"com.puppycrawl.tools.checkstyle.checks.metrics.ClassDataAbstractionCouplingCheck"}},{"$":{"line":"45","column":"5","severity":"error","message":"NCSS for this method is 64 (max allowed is 50).","source":"com.puppycrawl.tools.checkstyle.checks.metrics.JavaNCSSCheck"}},{"$":{"line":"230","column":"9","severity":"warning","message":"'{' should be on the previous line.","source":"com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"}},{"$":{"line":"236","severity":"error","message":"Line is longer than 100 characters.","source":"com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"}}]}]}}}
                
        ); 
        var controller = createController();
        scope.$digest();
        httpBackend.flush(); 

        expect(Object.keys(scope.hBars).length  > 0).toEqual(true);
        expect(Object.keys(scope.vBars).length > 0).toEqual(true);
        expect(Object.keys(scope.pie).length > 0).toEqual(true);
        
    });  
});